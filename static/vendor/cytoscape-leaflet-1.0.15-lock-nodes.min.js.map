{"version":3,"file":"cytoscape-leaflet-1.0.15-lock-nodes.min.js","sources":["../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableRest.js","../src/utils.ts","../node_modules/@babel/runtime/helpers/slicedToArray.js","../src/mapHandler.ts","../src/index.ts"],"sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import memoizeOne from 'memoize-one';\r\n\r\n/**\r\n * @see https://github.com/cytoscape/cytoscape.js/blob/master/src/extensions/renderer/base/load-listeners.js\r\n */\r\nexport function isMultSelKeyDown(event: MouseEvent) {\r\n  return event.shiftKey || event.metaKey || event.ctrlKey; // maybe event.altKey\r\n}\r\n\r\n/**\r\n * @param {cytoscape.Position} position1\r\n * @param {cytoscape.Position} position2\r\n * @return {boolean}\r\n */\r\nfunction arePositionsEqual(\r\n  position1: cytoscape.Position,\r\n  position2: cytoscape.Position\r\n) {\r\n  return position1.x === position2.x && position1.y === position2.y;\r\n}\r\n\r\nexport function getUpdatedPositions(\r\n  currentPositions: cytoscape.NodePositionMap,\r\n  positions: cytoscape.NodePositionMap\r\n): cytoscape.NodePositionMap {\r\n  return Object.fromEntries(\r\n    Object.entries(positions).filter(([id, position]) => {\r\n      const currentPosition = currentPositions[id];\r\n      return !arePositionsEqual(currentPosition, position);\r\n    })\r\n  );\r\n}\r\n\r\nexport const getUpdatedPositionsMemo = memoizeOne(getUpdatedPositions);\r\n\r\nexport const assign = Object.assign != null ? Object.assign.bind( Object ) : function( tgt: any, ...srcs: any[] ){\r\n  srcs.forEach( src => {\r\n    Object.keys( src ).forEach( k => tgt[k] = src[k] );\r\n  } );\r\n\r\n  return tgt;\r\n};\r\n","var arrayWithHoles = require(\"./arrayWithHoles.js\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableRest = require(\"./nonIterableRest.js\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import L, { PointTuple } from 'leaflet';\r\nimport { MapHandlerOptions } from './types';\r\nimport { isMultSelKeyDown, assign } from './utils';\r\nimport { EventObject } from 'cytoscape';\r\n\r\nconst DEFAULT_FIT_PADDING: PointTuple = [50, 50];\r\nconst DEFAULT_ANIMATION_DURATION = 1;\r\nconst HIDDEN_CLASS = 'cytoscape-map__hidden';\r\n\r\nconst DEFAULT_MAP_MOVE_DELAY = 0;\r\n\r\nconst DEFAULT_LAYOUT = {\r\n  name: 'preset',\r\n}\r\n\r\nexport class MapHandler {\r\n  cy: cytoscape.Core | undefined;\r\n  mapOptions: L.MapOptions;\r\n  options: MapHandlerOptions | undefined;\r\n\r\n  mapContainer: HTMLElement | undefined;\r\n  map: L.Map | undefined;\r\n\r\n  originalAutoungrabify: boolean | undefined;\r\n  originalUserZoomingEnabled: boolean | undefined;\r\n  originalUserPanningEnabled: boolean | undefined;\r\n\r\n  originalPositions: cytoscape.NodePositionMap | undefined;\r\n  originalZoom: number | undefined;\r\n  originalPan: cytoscape.Position | undefined;\r\n\r\n  panning: boolean = false;\r\n\r\n  requestAnimationId: number | undefined;\r\n\r\n  onGraphContainerMouseDownBound = this.onGraphContainerMouseDown.bind(this);\r\n  onGraphContainerMouseMoveBound = this.onGraphContainerMouseMove.bind(this);\r\n  onGraphContainerWheelBound = this.onGraphContainerWheel.bind(this);\r\n  onMapMoveBound = this.onMapMove.bind(this);\r\n  // onMapMoveStartBound = this.onMapMoveStart.bind(this);\r\n  onMapMoveEndBound = this.onMapMoveEnd.bind(this);\r\n\r\n  onGraphAddBound = this.onGraphAdd.bind(this);\r\n  onGraphResizeBound = this.onGraphResize.bind(this);\r\n  onGraphDragFreeBound = this.onGraphDragFree.bind(this);\r\n  onDataChangeBound = this.onDataChange.bind(this);\r\n\r\n  saveLayoutPositionAsLatLngBound = this.saveLayoutPositionAsLatLng.bind(this);\r\n\r\n  /**\r\n   * @param {cytoscape.Core} cy\r\n   * @param {L.MapOptions} mapOptions\r\n   * @param {MapHandlerOptions} options\r\n   */\r\n  constructor(\r\n    cy: cytoscape.Core,\r\n    mapOptions: L.MapOptions,\r\n    options: MapHandlerOptions\r\n  ) {\r\n    this.cy = cy;\r\n    this.mapOptions = mapOptions;\r\n    this.options = options;\r\n\r\n    if (!(typeof this.options.getPosition === 'function')) {\r\n      throw new Error('getPosition should be a function');\r\n    }\r\n    if (\r\n      this.options.setPosition &&\r\n      !(typeof this.options.setPosition === 'function')\r\n    ) {\r\n      throw new Error('setPosition should be a function');\r\n    }\r\n\r\n    // Cytoscape config\r\n    this.originalAutoungrabify = this.cy.autoungrabify();\r\n    this.originalUserZoomingEnabled = this.cy.userZoomingEnabled();\r\n    this.originalUserPanningEnabled = this.cy.userPanningEnabled();\r\n\r\n    this.cy.userZoomingEnabled(false);\r\n    this.cy.userPanningEnabled(false);\r\n\r\n    // Cytoscape events\r\n    const graphContainer = this.cy.container() as unknown as HTMLElement;\r\n    // graphContainer.addEventListener(\r\n    //   'mousedown',\r\n    //   this.onGraphContainerMouseDownBound\r\n    // );\r\n    // graphContainer.addEventListener(\r\n    //   'mousemove',\r\n    //   this.onGraphContainerMouseMoveBound\r\n    // );\r\n    this.cy.on('tapstart', this.onGraphContainerMouseDownBound);\r\n\r\n    graphContainer.addEventListener('wheel', this.onGraphContainerWheelBound);\r\n    this.cy.on('add', this.onGraphAddBound);\r\n    this.cy.on('resize', this.onGraphResizeBound);\r\n    this.cy.on('dragfree', this.onGraphDragFreeBound);\r\n    this.cy.on('cxttap', \"node\", function(event) {\r\n      event.target.unlock();\r\n    });\r\n    this.cy.on('data', this.onDataChangeBound);\r\n\r\n    // this.cy.on('layoutstart layoutready layoutstop ready render destroy pan dragpan zoom pinchzoom scrollzoom viewport resize', (evt) => {\r\n    //   console.log(evt.type);\r\n    // })\r\n    //\r\n    // this.cy.one('render', (evt) => {\r\n    //   console.log(evt);\r\n    // })\r\n\r\n    // Map container\r\n    this.mapContainer = document.createElement('div');\r\n    this.mapContainer.style.position = 'absolute';\r\n    this.mapContainer.style.top = '0px';\r\n    this.mapContainer.style.left = '0px';\r\n    this.mapContainer.style.width = '100%';\r\n    this.mapContainer.style.height = '100%';\r\n\r\n    graphContainer?.prepend(this.mapContainer);\r\n\r\n    // Leaflet instance\r\n    this.map = new L.Map(this.mapContainer, this.mapOptions);\r\n    this.fit(undefined, { padding: DEFAULT_FIT_PADDING, animate: false });\r\n\r\n    // Map events\r\n    this.map.on('move', this.onMapMoveBound);\r\n    // this.map.on('movestart', this.onMapMoveStartBound);\r\n    this.map.on('moveend', this.onMapMoveEndBound);\r\n\r\n    // Cytoscape unit viewport\r\n    this.originalZoom = this.cy.zoom();\r\n    this.originalPan = { ...this.cy.pan() };\r\n\r\n    const zoom = 1;\r\n    const pan = { x: 0, y: 0 };\r\n\r\n    if (this.options.animate) {\r\n      this.cy.animate(\r\n        {\r\n          zoom: zoom,\r\n          pan: pan,\r\n        },\r\n        {\r\n          duration:\r\n            this.options.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n          easing: 'linear',\r\n        }\r\n      );\r\n    } else {\r\n      this.cy.viewport({ zoom, pan });\r\n    }\r\n\r\n    // Cytoscape positions\r\n    this.enableGeographicPositions();\r\n  }\r\n\r\n  destroy() {\r\n    // Cytoscape events\r\n    const graphContainer = this.cy?.container();\r\n    if (graphContainer) {\r\n      // graphContainer.removeEventListener(\r\n      //   'mousedown',\r\n      //   this.onGraphContainerMouseDownBound\r\n      // );\r\n      // graphContainer.removeEventListener(\r\n      //   'mousemove',\r\n      //   this.onGraphContainerMouseMoveBound\r\n      // );\r\n      graphContainer.removeEventListener(\r\n        'wheel',\r\n        this.onGraphContainerWheelBound\r\n      );\r\n    }\r\n    if (this.cy) {\r\n      this.cy.off('tapstart', this.onGraphContainerMouseDownBound);\r\n      this.cy.off('add', this.onGraphAddBound);\r\n      this.cy.off('resize', this.onGraphResizeBound);\r\n      this.cy.off('dragfree', this.onGraphDragFreeBound);\r\n      this.cy.off('data', this.onDataChangeBound);\r\n\r\n      // Cytoscape config\r\n      this.cy.autoungrabify(this.originalAutoungrabify);\r\n      this.cy.userZoomingEnabled(this.originalUserZoomingEnabled);\r\n      this.cy.userPanningEnabled(this.originalUserPanningEnabled);\r\n    }\r\n    this.originalAutoungrabify = undefined;\r\n    this.originalUserZoomingEnabled = undefined;\r\n    this.originalUserPanningEnabled = undefined;\r\n\r\n    // Map events\r\n    this.map?.off('move', this.onMapMoveBound);\r\n    // this.map?.off('dragstart', this.onMapDragStartBound);\r\n    this.map?.off('dragend');\r\n\r\n    // Map instance\r\n    this.map?.remove();\r\n    this.map = undefined;\r\n\r\n    // Map container\r\n    this.mapContainer?.remove();\r\n    this.mapContainer = undefined;\r\n\r\n    // Cytoscape unit viewport\r\n    if (this.options?.animate) {\r\n      this.cy?.animate(\r\n        {\r\n          zoom: this.originalZoom,\r\n          pan: this.originalPan,\r\n        },\r\n        {\r\n          duration:\r\n            this.options.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n          easing: 'linear',\r\n        }\r\n      );\r\n    } else {\r\n      this.cy?.viewport({\r\n        zoom: this.originalZoom ?? 5,\r\n        pan:\r\n          this.originalPan ??\r\n          ({\r\n            x: 0,\r\n            y: 0,\r\n          } as cytoscape.Position),\r\n      });\r\n    }\r\n\r\n    this.originalZoom = undefined;\r\n    this.originalPan = undefined;\r\n\r\n    // Cytoscape positions\r\n    this.disableGeographicPositions();\r\n\r\n    this.cy = undefined;\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {cytoscape.NodeCollection} nodes\r\n   * @param {L.FitBoundsOptions} options\r\n   */\r\n  fit(\r\n    nodes: cytoscape.NodeCollection = this.cy?.nodes() ??\r\n      ([] as unknown as cytoscape.NodeCollection),\r\n    options: L.FitBoundsOptions\r\n  ) {\r\n    const bounds = this.getNodeLngLatBounds(nodes);\r\n    if (!bounds.isValid()) {\r\n      return;\r\n    }\r\n\r\n    this.map?.fitBounds(bounds, options);\r\n  }\r\n\r\n  /**\r\n   * Save each node current layout position as the current geographical position.\r\n   * Node's position is saved into its scratch, as <i>leaflet</i> namespace and <i>currentGeoposition<i> LatLng object\r\n   * @param {cytoscape.NodeCollection} nodes\r\n   */\r\n  saveLayoutPositionAsLatLng(nodes = this.cy?.nodes()) {\r\n    nodes?.forEach((node) => {\r\n        // if (!(node.scratch('leaflet') && node.scratch('leaflet')['currentGeoposition'])) {\r\n        // @ts-ignore\r\n      node.scratch('leaflet', {currentGeoposition: this.map?.containerPointToLatLng(node.position())})\r\n        // }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * Delete layout geographic position from each node's scratch\r\n   * @param nodes\r\n   */\r\n  deleteLatLngLayoutPosition(nodes= this.cy?.nodes()) {\r\n    nodes?.forEach((node) => {\r\n      if (node.scratch('leaflet') && node.scratch('leaflet').currentGeoposition) {\r\n        delete node.scratch('leaflet').currentGeoposition;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update nodes positions (calling node.position() method)\r\n   * and (optionally) hide nodes without geographical position\r\n   * @private\r\n   */\r\n  updateNodePosition(nodes = this.cy?.nodes()) {\r\n    nodes?.forEach((node) => {\r\n\r\n      // let wasLocked = node.locked();\r\n\r\n      // if (wasLocked) node.unlock();\r\n\r\n      node.unlock();\r\n      let position = this.getGeographicPosition(node);\r\n      if(position) {\r\n        node.position(position);\r\n        // if (this.getNodeLngLat(node)) { // nodes that have native geographical positions cannot be dragged\r\n        node.lock();\r\n        // }\r\n      }\r\n\r\n      // hide nodes without position\r\n      if (!position && this.options?.hideNonPositional) {\r\n        // const nodesWithoutPosition = nodes.filter(node => !positions[node.id()]);\r\n        node.addClass(HIDDEN_CLASS).style('display', 'none');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @return {cytoscape.LayoutOptions}\r\n   * @param {*} [customOptions]\r\n   */\r\n  getLayout(customOptions: any = undefined) {\r\n    return assign(DEFAULT_LAYOUT, this.options?.layout, customOptions);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private enableGeographicPositions() {\r\n    const nodes: cytoscape.NodeCollection =\r\n      this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection);\r\n\r\n    this.originalPositions = Object.fromEntries(\r\n      nodes.map((node) => {\r\n        return [node.id(), { ...node.position() }];\r\n      })\r\n    );\r\n\r\n    /*\r\n    const positions: cytoscape.NodePositionMap = Object.fromEntries(\r\n      nodes\r\n        .map((node) => {\r\n          return [node.id(), this.getGeographicPosition(node)];\r\n        })\r\n        .filter(([_id, position]) => {\r\n          return !!position;\r\n        })\r\n    );\r\n    */\r\n    /*\r\n    this.cy\r\n      ?.elements().makeLayout(this.getLayout({\r\n      fit: false,\r\n      animate: this.options?.animate,\r\n      animationDuration: this.options?.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n      animationEasing: 'ease-out-cubic',\r\n    }))\r\n      // .one('layoutstop', this.saveLayoutPositionAsLatLngBound)\r\n      .run();\r\n    */\r\n\r\n    this.cy?.nodes().forEach((node) => {\r\n      if (this.getNodeLngLat(node)) {\r\n        node.lock();\r\n      }\r\n    });\r\n\r\n    this.updateNodePosition(nodes);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.NodeCollection | undefined} nodes\r\n   */\r\n  private updateGeographicPositions(\r\n    nodes = this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection)\r\n  ) {\r\n   /* const updatePositions = (\r\n      nodes = this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection)\r\n    ) => {\r\n      const positions: cytoscape.NodePositionMap = Object.fromEntries(\r\n        nodes\r\n          .map((node) => {\r\n            return [node.id(), this.getGeographicPosition(node)];\r\n          })\r\n          .filter(([_id, position]) => {\r\n            return !!position;\r\n          })\r\n      );\r\n\r\n      // update only positions which have changed, for cytoscape-edgehandles compatibility\r\n      const currentPositions: cytoscape.NodePositionMap = Object.fromEntries(\r\n        nodes.map((node) => {\r\n          return [node.id(), { ...node.position() }];\r\n        })\r\n      );\r\n      const updatedPositions = getUpdatedPositionsMemo(\r\n        currentPositions,\r\n        positions\r\n      );\r\n\r\n      // hide nodes without position\r\n      const nodesWithoutPosition = nodes.filter(\r\n        (node) => !positions[node.id()]\r\n      );\r\n      nodesWithoutPosition.addClass(HIDDEN_CLASS).style('display', 'none');\r\n\r\n      this.cy\r\n        ?.layout({\r\n          name: 'preset',\r\n          positions: updatedPositions,\r\n          fit: false,\r\n        })\r\n        .run();\r\n    };\r\n\r\n    this.requestAnimationId = window.requestAnimationFrame(\r\n      function animatedUpdateGeographicPositions() {\r\n        updatePositions(nodes);\r\n      }\r\n    );*/\r\n\r\n    this.updateNodePosition(nodes);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private disableGeographicPositions() {\r\n    const nodes =\r\n      this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection);\r\n\r\n/*    this.cy\r\n      ?.layout({\r\n        name: 'preset',\r\n        positions: this.originalPositions,\r\n        fit: false,\r\n        animate: this.options?.animate,\r\n        animationDuration:\r\n          this.options?.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n        animationEasing: 'ease-in-cubic',\r\n        stop: () => {\r\n          // show nodes without position\r\n          const nodesWithoutPosition = nodes.filter((node) =>\r\n            node.hasClass(HIDDEN_CLASS)\r\n          );\r\n          nodesWithoutPosition.removeClass(HIDDEN_CLASS).style('display', null);\r\n        },\r\n      })\r\n      .run();*/\r\n\r\n    // show nodes without position\r\n    if (this.options?.hideNonPositional) {\r\n      const nodesWithoutPosition = nodes.filter(node => node.hasClass(HIDDEN_CLASS));\r\n      nodesWithoutPosition.removeClass(HIDDEN_CLASS).style('display', null);\r\n    }\r\n\r\n    nodes.forEach((node) => {\r\n      // if (this.originalPositions && this.originalPositions[node.id()]) {\r\n      //   node.position(this.originalPositions[node.id()]);\r\n      //   node.unlock();\r\n      // }\r\n      node.unlock();\r\n    });\r\n\r\n    this.cy?.fit();\r\n    // this.cy.layout(this.getLayout({\r\n    //   fit: false,\r\n    //   animate: this.options.animate,\r\n    //   animationDuration: this.options.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n    //   animationEasing: 'ease-in-cubic',\r\n    //   stop: () => {\r\n    //     // show nodes without position\r\n    //     const nodesWithoutPosition = nodes.filter(node => node.hasClass(HIDDEN_CLASS));\r\n    //     nodesWithoutPosition.removeClass(HIDDEN_CLASS).style('display', null);\r\n    //   }\r\n    // })).run();\r\n\r\n    this.cy?.one('layoutstop', (evt) => {\r\n      evt.cy.nodes().unlock();\r\n    });\r\n\r\n    this.originalPositions = undefined;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {EventObject} cyEventObject\r\n   */\r\n  private onGraphContainerMouseDown(cyEventObject: EventObject) {\r\n    let originalEvent = cyEventObject.originalEvent;\r\n\r\n    // @ts-ignore\r\n    const renderer = this.cy?.renderer();\r\n    if (\r\n      this.cy &&\r\n      originalEvent.buttons === 1 &&\r\n      !isMultSelKeyDown(originalEvent) &&\r\n      !renderer.hoverData.down\r\n    ) {\r\n/*      // @ts-ignore,\r\n      if (this.cy) this.cy.renderer().hoverData.dragging = true; // cytoscape-lasso compatibility\r\n      this.dispatchMapEvent(event);\r\n\r\n      document.addEventListener(\r\n        'mouseup',\r\n        () => {\r\n          if (!this.panning) {\r\n            return;\r\n          }\r\n\r\n          this.panning = false;\r\n\r\n          // @ts-ignore, prevent unselecting in Cytoscape mouseup\r\n          if (this.cy) this.cy.renderer().hoverData.dragged = true;\r\n        },\r\n        { once: true }\r\n      );*/\r\n\r\n      // @ts-ignore\r\n      this.cy.renderer().hoverData.dragging = true; // cytoscape-lasso compatibility\r\n\r\n      this.saveLayoutPositionAsLatLng(cyEventObject.cy.nodes());\r\n      this.dispatchMapEvent(originalEvent);\r\n\r\n      // @ts-ignore\r\n      this.cy.one('tapdrag', this.onGraphContainerMouseMoveBound);\r\n\r\n      // this.cy.nodes('#London-NewYork1').on('position', (evt) => {\r\n      //   let data = {\r\n      //     position: evt.target.position(),\r\n      //     rendered: evt.target.renderedPosition(),\r\n      //     relative: evt.target.relativePosition()\r\n      //   }\r\n      //\r\n      //   if (evt.target.scratch('leaflet')) {\r\n      //     data['geoposition'] = evt.target.scratch('leaflet').currentGeoposition;\r\n      //   }\r\n      //\r\n      //   console.table(data);\r\n      // });\r\n\r\n      // @ts-ignore\r\n      cyEventObject.cy.one('tapend', (cyUpEventObject) => {\r\n        // this.deleteLatLngLayoutPosition(cyUpEventObject.cy.nodes());\r\n        // this.updateGeographicPositions(cyUpEventObject.cy.nodes());\r\n\r\n        // console.warn(\"TAPEND\");\r\n        // setTimeout(()=>{\r\n        //   this.cy.nodes('#London-NewYork1').off('position');\r\n        // }, 500);\r\n\r\n        if (!this.panning) {\r\n          return;\r\n        }\r\n\r\n        this.panning = false;\r\n\r\n        // @ts-ignore,  prevent unselecting in Cytoscape mouseup\r\n        this.cy.renderer().hoverData.dragged = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.EventObject} cyEventObject\r\n   */\r\n  private onGraphContainerMouseMove(cyEventObject: EventObject) {\r\n    const originalEvent = cyEventObject.originalEvent;\r\n    // @ts-ignore\r\n    const renderer = this.cy?.renderer();\r\n    if (\r\n      originalEvent.buttons === 1 &&\r\n      !isMultSelKeyDown(originalEvent) &&\r\n      !renderer.hoverData.down\r\n    ) {\r\n      this.panning = true;\r\n      cyEventObject.preventDefault();\r\n      this.dispatchMapEvent(originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {MouseEvent} event\r\n   */\r\n  private onGraphContainerWheel(event: MouseEvent) {\r\n    event.preventDefault();\r\n    this.dispatchMapEvent(event);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private onMapMove() {\r\n    this.updateGeographicPositions();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private onDataChange() {\r\n    this.updateGeographicPositions();\r\n  }\r\n\r\n  onMapMoveEnd() {\r\n    // console.log(\"moveend\");\r\n    setTimeout(() => {\r\n      this.cy?.nodes().forEach((node) => {\r\n\r\n        if (!this.getNodeLngLat(node)) {\r\n          // console.log(\"unlock\");\r\n          // this.updateNodePosition(node);\r\n          node.unlock();\r\n        }\r\n      });\r\n    }, this.options?.delayOnMove || DEFAULT_MAP_MOVE_DELAY);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.EventObject} event\r\n   */\r\n  private onGraphAdd(event: cytoscape.EventObject) {\r\n    if (!event.target.isNode()) {\r\n      return;\r\n    }\r\n\r\n    const node: cytoscape.NodeSingular = event.target;\r\n\r\n    if (!this.originalPositions) this.originalPositions = {};\r\n    this.originalPositions[node.id()] = { ...node.position() };\r\n\r\n    const nodes = this.cy?.collection().merge(node);\r\n    this.updateGeographicPositions(nodes);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private onGraphResize() {\r\n    this.map?.invalidateSize(false);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.EventObject} event\r\n   */\r\n  private onGraphDragFree(event: cytoscape.EventObject) {\r\n    const node: cytoscape.NodeSingular = event.target;\r\n\r\n    if (this.options?.setPosition) {\r\n      const { x, y } = node.position();\r\n      const position: PointTuple = [x, y];\r\n      const lngLat = this.map?.containerPointToLatLng(position);\r\n      if (lngLat) this.options.setPosition(node, lngLat);\r\n    }\r\n\r\n    const nodes = this.cy?.collection().merge(node);\r\n    this.updateGeographicPositions(nodes);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {MouseEvent} event\r\n   */\r\n  private dispatchMapEvent(event: MouseEvent) {\r\n    if (\r\n      event.target === this.mapContainer ||\r\n      // @ts-ignore\r\n      this.mapContainer?.contains(event.target)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // @ts-ignore\r\n    const clonedEvent = new event.constructor(event.type, event);\r\n    this.map?.getContainer().dispatchEvent(clonedEvent);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.NodeSingular} node\r\n   * @return {L.LatLng | undefined}\r\n   */\r\n  private getNodeLngLat(node: cytoscape.NodeSingular): L.LatLng | undefined {\r\n    if (typeof this.options?.getPosition !== 'function') return;\r\n\r\n    const lngLatLike = this.options?.getPosition(node);\r\n    if (!lngLatLike) {\r\n      return;\r\n    }\r\n\r\n    let lngLat;\r\n    try {\r\n      lngLat = L.latLng(lngLatLike);\r\n    } catch (e) {\r\n      return;\r\n    }\r\n\r\n    return lngLat;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.NodeCollection} nodes\r\n   * @return {L.LatLngBounds}\r\n   */\r\n  private getNodeLngLatBounds(\r\n    nodes: cytoscape.NodeCollection = this.cy?.nodes() ??\r\n      ([] as unknown as cytoscape.NodeCollection)\r\n  ): L.LatLngBounds {\r\n    return nodes.reduce((bounds, node) => {\r\n      const lngLat = this.getNodeLngLat(node);\r\n      if (!lngLat) {\r\n        return bounds;\r\n      }\r\n\r\n      return bounds.extend(lngLat);\r\n    }, L.latLngBounds([]));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.NodeSingular} node\r\n   * @return {cytoscape.Position | undefined}\r\n   */\r\n  private getGeographicPosition(\r\n    node: cytoscape.NodeSingular\r\n  ): cytoscape.Position | undefined {\r\n    const lngLat = this.getNodeLngLat(node) || (node.scratch('leaflet') && node.scratch('leaflet').currentGeoposition);\r\n    if (!lngLat) {\r\n      return;\r\n    }\r\n\r\n    return this.map?.latLngToContainerPoint(lngLat);\r\n  }\r\n}\r\n","import L from 'leaflet';\r\nimport { MapHandler } from './mapHandler';\r\nimport { Instance, MapHandlerOptions } from './types';\r\n\r\nfunction register(cytoscape: Instance) {\r\n  if (!cytoscape) {\r\n    return;\r\n  }\r\n\r\n  cytoscape(\r\n    'core',\r\n    'L',\r\n    function (mapConfig: L.MapOptions, config: MapHandlerOptions) {\r\n      return new MapHandler(\r\n        // @ts-ignore\r\n        this,\r\n        mapConfig,\r\n        config\r\n      );\r\n    }\r\n  );\r\n}\r\n\r\nif (typeof window.cytoscape !== 'undefined') {\r\n  register(window.cytoscape);\r\n}\r\n\r\nexport default register;\r\n"],"names":["module","instance","Constructor","TypeError","exports","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","obj","value","arr","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","err","len","arr2","o","minLen","arrayLikeToArray","n","toString","slice","constructor","name","from","test","isMultSelKeyDown","event","shiftKey","metaKey","ctrlKey","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","assign","bind","tgt","srcs","forEach","src","keys","k","DEFAULT_FIT_PADDING","HIDDEN_CLASS","DEFAULT_LAYOUT","MapHandler","cy","mapOptions","options","this","onGraphContainerMouseDown","onGraphContainerMouseMove","onGraphContainerWheel","onMapMove","onMapMoveEnd","onGraphAdd","onGraphResize","onGraphDragFree","onDataChange","saveLayoutPositionAsLatLng","getPosition","Error","setPosition","originalAutoungrabify","autoungrabify","originalUserZoomingEnabled","userZoomingEnabled","originalUserPanningEnabled","userPanningEnabled","graphContainer","container","on","onGraphContainerMouseDownBound","addEventListener","onGraphContainerWheelBound","onGraphAddBound","onGraphResizeBound","onGraphDragFreeBound","unlock","onDataChangeBound","mapContainer","document","createElement","style","position","top","left","width","height","prepend","map","L","Map","fit","undefined","padding","animate","onMapMoveBound","onMapMoveEndBound","originalZoom","zoom","originalPan","pan","x","y","duration","animationDuration","easing","viewport","enableGeographicPositions","_this$cy","removeEventListener","off","remove","_this$options","disableGeographicPositions","nodes","_this$cy4","bounds","getNodeLngLatBounds","isValid","fitBounds","_this$cy5","node","scratch","currentGeoposition","_this","_this$map5","containerPointToLatLng","_this$cy6","_this$cy7","_this2","getGeographicPosition","lock","_this2$options","hideNonPositional","addClass","customOptions","_this$options2","layout","_this$cy8","originalPositions","fromEntries","id","_this3","getNodeLngLat","updateNodePosition","_this$cy10","_this$cy11","_this$options3","filter","hasClass","removeClass","one","evt","cyEventObject","originalEvent","renderer","_this$cy14","buttons","hoverData","down","dragging","dispatchMapEvent","onGraphContainerMouseMoveBound","cyUpEventObject","_this4","panning","dragged","_this$cy15","preventDefault","updateGeographicPositions","setTimeout","_this5","delayOnMove","isNode","_this$cy16","collection","merge","invalidateSize","_this$options5","lngLat","_this$map7","_this$cy17","_this$mapContainer2","contains","clonedEvent","type","getContainer","dispatchEvent","_this$options6","lngLatLike","_this$options7","latLng","e","_this$cy18","reduce","_this6","extend","latLngBounds","_this$map9","latLngToContainerPoint","register","cytoscape","mapConfig","config","window"],"mappings":"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"}