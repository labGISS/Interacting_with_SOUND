{"version":3,"file":"cytoscape-leaflet-1.0.15-multiple-layouts.min.js","sources":["../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableRest.js","../node_modules/@babel/runtime/helpers/slicedToArray.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../src/utils.ts","../src/mapHandler.ts","../src/index.ts"],"sourcesContent":["function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithHoles = require(\"./arrayWithHoles.js\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableRest = require(\"./nonIterableRest.js\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","import memoizeOne from 'memoize-one';\r\n\r\n/**\r\n * @see https://github.com/cytoscape/cytoscape.js/blob/master/src/extensions/renderer/base/load-listeners.js\r\n */\r\nexport function isMultSelKeyDown(event: MouseEvent) {\r\n  return event.shiftKey || event.metaKey || event.ctrlKey; // maybe event.altKey\r\n}\r\n\r\n/**\r\n * @param {cytoscape.Position} position1\r\n * @param {cytoscape.Position} position2\r\n * @return {boolean}\r\n */\r\nfunction arePositionsEqual(\r\n  position1: cytoscape.Position,\r\n  position2: cytoscape.Position\r\n) {\r\n  return position1.x === position2.x && position1.y === position2.y;\r\n}\r\n\r\nexport function getUpdatedPositions(\r\n  currentPositions: cytoscape.NodePositionMap,\r\n  positions: cytoscape.NodePositionMap\r\n): cytoscape.NodePositionMap {\r\n  return Object.fromEntries(\r\n    Object.entries(positions).filter(([id, position]) => {\r\n      const currentPosition = currentPositions[id];\r\n      return !arePositionsEqual(currentPosition, position);\r\n    })\r\n  );\r\n}\r\n\r\nexport const getUpdatedPositionsMemo = memoizeOne(getUpdatedPositions);\r\nexport const assign = Object.assign != null ? Object.assign.bind( Object ) : function( tgt: any, ...srcs: any[] ){\r\n  srcs.forEach( src => {\r\n    Object.keys( src ).forEach( k => tgt[k] = src[k] );\r\n  } );\r\n\r\n  return tgt;\r\n};\r\n","import L, { PointTuple } from 'leaflet';\r\nimport { MapHandlerOptions } from './types';\r\nimport { getUpdatedPositionsMemo, isMultSelKeyDown, assign } from './utils';\r\nimport cytoscape from 'cytoscape';\r\n// import { filter } from 'minimatch';\r\n\r\nconst DEFAULT_FIT_PADDING: PointTuple = [50, 50];\r\nconst DEFAULT_ANIMATION_DURATION = 1;\r\nconst HIDDEN_CLASS = 'cytoscape-map__hidden';\r\n\r\nconst DEFAULT_LAYOUT = {\r\n  name: 'preset',\r\n}\r\n\r\nexport class MapHandler {\r\n  cy: cytoscape.Core | undefined;\r\n  mapOptions: L.MapOptions;\r\n  options: MapHandlerOptions | undefined;\r\n\r\n  mapContainer: HTMLElement | undefined;\r\n  map: L.Map | undefined;\r\n\r\n  originalAutoungrabify: boolean | undefined;\r\n  originalUserZoomingEnabled: boolean | undefined;\r\n  originalUserPanningEnabled: boolean | undefined;\r\n\r\n  originalPositions: cytoscape.NodePositionMap | undefined;\r\n  originalZoom: number | undefined;\r\n  originalPan: cytoscape.Position | undefined;\r\n\r\n  panning: boolean = false;\r\n  layouting: boolean = false;\r\n\r\n  requestAnimationId: number | undefined;\r\n\r\n  onGraphContainerMouseDownBound = this.onGraphContainerMouseDown.bind(this);\r\n  onGraphContainerMouseMoveBound = this.onGraphContainerMouseMove.bind(this);\r\n  onGraphContainerWheelBound = this.onGraphContainerWheel.bind(this);\r\n  onMapMoveBound = this.onMapMove.bind(this);\r\n\r\n  onLayoutStartBound = this.onLayoutStart.bind(this);\r\n  onLayoutStopBound = this.onLayoutStop.bind(this);\r\n\r\n  onGraphAddBound = this.onGraphAdd.bind(this);\r\n  onGraphResizeBound = this.onGraphResize.bind(this);\r\n  onGraphDragFreeBound = this.onGraphDragFree.bind(this);\r\n  onDataChangeBound = this.onDataChange.bind(this);\r\n\r\n  /**\r\n   * @param {cytoscape.Core} cy\r\n   * @param {L.MapOptions} mapOptions\r\n   * @param {MapHandlerOptions} options\r\n   */\r\n  constructor(\r\n    cy: cytoscape.Core,\r\n    mapOptions: L.MapOptions,\r\n    options: MapHandlerOptions\r\n  ) {\r\n    this.cy = cy;\r\n    this.mapOptions = mapOptions;\r\n    this.options = options;\r\n\r\n    if (!(typeof this.options.getPosition === 'function')) {\r\n      throw new Error('getPosition should be a function');\r\n    }\r\n    if (\r\n      this.options.setPosition &&\r\n      !(typeof this.options.setPosition === 'function')\r\n    ) {\r\n      throw new Error('setPosition should be a function');\r\n    }\r\n\r\n    // Cytoscape config\r\n    this.originalAutoungrabify = this.cy.autoungrabify();\r\n    this.originalUserZoomingEnabled = this.cy.userZoomingEnabled();\r\n    this.originalUserPanningEnabled = this.cy.userPanningEnabled();\r\n\r\n    this.cy.userZoomingEnabled(false);\r\n    this.cy.userPanningEnabled(false);\r\n\r\n    // Cytoscape events\r\n    const graphContainer = this.cy.container() as unknown as HTMLElement;\r\n    graphContainer.addEventListener(\r\n      'mousedown',\r\n      this.onGraphContainerMouseDownBound\r\n    );\r\n    graphContainer.addEventListener(\r\n      'mousemove',\r\n      this.onGraphContainerMouseMoveBound\r\n    );\r\n    graphContainer.addEventListener('wheel', this.onGraphContainerWheelBound);\r\n    this.cy.on('add', this.onGraphAddBound);\r\n    this.cy.on('resize', this.onGraphResizeBound);\r\n    this.cy.on('dragfree', this.onGraphDragFreeBound);\r\n    this.cy.on('data', this.onDataChangeBound);\r\n\r\n    this.cy.on(\"layoutstart \", this.onLayoutStartBound);\r\n    this.cy.on(\"layoutstop\", this.onLayoutStopBound);\r\n\r\n    // Map container\r\n    this.mapContainer = document.createElement('div');\r\n    this.mapContainer.style.position = 'absolute';\r\n    this.mapContainer.style.top = '0px';\r\n    this.mapContainer.style.left = '0px';\r\n    this.mapContainer.style.width = '100%';\r\n    this.mapContainer.style.height = '100%';\r\n\r\n    graphContainer?.prepend(this.mapContainer);\r\n\r\n    // Leaflet instance\r\n    this.map = new L.Map(this.mapContainer, this.mapOptions);\r\n    this.fit(undefined, { padding: DEFAULT_FIT_PADDING, animate: false });\r\n\r\n    // Map events\r\n    this.map.on('move', this.onMapMoveBound);\r\n\r\n    // Cytoscape unit viewport\r\n    this.originalZoom = this.cy.zoom();\r\n    this.originalPan = { ...this.cy.pan() };\r\n\r\n    const zoom = 1;\r\n    const pan = { x: 0, y: 0 };\r\n\r\n    if (this.options.animate) {\r\n      this.cy.animate(\r\n        {\r\n          zoom: zoom,\r\n          pan: pan,\r\n        },\r\n        {\r\n          duration:\r\n            this.options.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n          easing: 'linear',\r\n        }\r\n      );\r\n    } else {\r\n      this.cy.viewport({ zoom, pan });\r\n    }\r\n\r\n    // Cytoscape positions\r\n    this.enableGeographicPositions();\r\n  }\r\n\r\n  destroy() {\r\n    // Cytoscape events\r\n    const graphContainer = this.cy?.container();\r\n    if (graphContainer) {\r\n      graphContainer.removeEventListener(\r\n        'mousedown',\r\n        this.onGraphContainerMouseDownBound\r\n      );\r\n      graphContainer.removeEventListener(\r\n        'mousemove',\r\n        this.onGraphContainerMouseMoveBound\r\n      );\r\n      graphContainer.removeEventListener(\r\n        'wheel',\r\n        this.onGraphContainerWheelBound\r\n      );\r\n    }\r\n    if (this.cy) {\r\n      this.cy.off('add', this.onGraphAddBound);\r\n      this.cy.off('resize', this.onGraphResizeBound);\r\n      this.cy.off('dragfree', this.onGraphDragFreeBound);\r\n      this.cy.off('data', this.onDataChangeBound);\r\n\r\n      this.cy.off('layoutstart', this.onLayoutStartBound);\r\n      this.cy.off('layoutstop', this.onLayoutStopBound);\r\n\r\n      // Cytoscape config\r\n      this.cy.autoungrabify(this.originalAutoungrabify);\r\n      this.cy.userZoomingEnabled(this.originalUserZoomingEnabled);\r\n      this.cy.userPanningEnabled(this.originalUserPanningEnabled);\r\n    }\r\n    this.originalAutoungrabify = undefined;\r\n    this.originalUserZoomingEnabled = undefined;\r\n    this.originalUserPanningEnabled = undefined;\r\n\r\n    // Map events\r\n    this.map?.off('move', this.onMapMoveBound);\r\n\r\n    // Map instance\r\n    this.map?.remove();\r\n    this.map = undefined;\r\n\r\n    // Map container\r\n    this.mapContainer?.remove();\r\n    this.mapContainer = undefined;\r\n\r\n    // Cytoscape unit viewport\r\n    if (this.options?.animate) {\r\n      this.cy?.animate(\r\n        {\r\n          zoom: this.originalZoom,\r\n          pan: this.originalPan,\r\n        },\r\n        {\r\n          duration:\r\n            this.options.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n          easing: 'linear',\r\n        }\r\n      );\r\n    } else {\r\n      this.cy?.viewport({\r\n        zoom: this.originalZoom ?? 5,\r\n        pan:\r\n          this.originalPan ??\r\n          ({\r\n            x: 0,\r\n            y: 0,\r\n          } as cytoscape.Position),\r\n      });\r\n    }\r\n\r\n    this.originalZoom = undefined;\r\n    this.originalPan = undefined;\r\n\r\n    // Cytoscape positions\r\n    this.disableGeographicPositions();\r\n\r\n    this.cy = undefined;\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {cytoscape.NodeCollection} nodes\r\n   * @param {L.FitBoundsOptions} options\r\n   */\r\n  fit(\r\n    nodes: cytoscape.NodeCollection = this.cy?.nodes() ??\r\n    ([] as unknown as cytoscape.NodeCollection),\r\n    options: L.FitBoundsOptions\r\n  ) {\r\n    const bounds = this.getNodeLngLatBounds(nodes);\r\n    if (!bounds.isValid()) {\r\n      return;\r\n    }\r\n\r\n    this.map?.fitBounds(bounds, options);\r\n  }\r\n\r\n  /**\r\n   * @return {cytoscape.LayoutOptions}\r\n   * @param {*} [customOptions]\r\n   */\r\n  private getDefaultLayout(customOptions: any = undefined): cytoscape.LayoutOptions {\r\n    return assign(DEFAULT_LAYOUT, this.options?.layout, customOptions);\r\n  }\r\n\r\n  /**\r\n   * Run layout. By default, all nodes are updated\r\n   * @param nodes run the layout for specific nodes\r\n   * @private\r\n   */\r\n  private runDefaultLayout(\r\n    nodes = this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection)\r\n  ) {\r\n    this.deleteInternalLayoutPosition(nodes);\r\n    nodes.layout(this.getDefaultLayout()).run();\r\n  }\r\n\r\n\r\n  /**\r\n   * Save each node current layout position as the current geographical position.\r\n   * Node's position is saved into its scratch, as <i>leaflet</i> namespace and <i>currentGeoposition<i> LatLng object\r\n   * @param {cytoscape.NodeCollection} nodes\r\n   */\r\n  private saveInternalLayoutPositionAsLatLng(\r\n    nodes: cytoscape.NodeCollection = this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection)\r\n  ) {\r\n    nodes?.forEach((node) => {\r\n        // if (!(node.scratch('leaflet') && node.scratch('leaflet')['currentGeoposition'])) {\r\n        // @ts-ignore\r\n        node.scratch('leaflet', {currentGeoposition: this.map?.containerPointToLatLng(node.position())})\r\n        // }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  /**\r\n   * Delete layout geographic position from each node's scratch\r\n   * @param nodes\r\n   */\r\n  private deleteInternalLayoutPosition(\r\n    nodes: cytoscape.NodeCollection = this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection)\r\n  ) {\r\n    nodes?.forEach((node) => {\r\n      if (node.scratch('leaflet') && node.scratch('leaflet').currentGeoposition) {\r\n        delete node.scratch('leaflet').currentGeoposition;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private enableGeographicPositions() {\r\n    const nodes: cytoscape.NodeCollection =\r\n      this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection);\r\n\r\n    this.originalPositions = Object.fromEntries(\r\n      nodes.map((node) => {\r\n        return [node.id(), { ...node.position() }];\r\n      })\r\n    );\r\n\r\n    const positions: cytoscape.NodePositionMap = Object.fromEntries(\r\n      nodes\r\n        .map((node) => {\r\n          return [node.id(), this.getGeographicPosition(node)];\r\n        })\r\n        .filter(([_id, position]) => {\r\n          return !!position;\r\n        })\r\n    );\r\n\r\n    const nodesWithoutPosition = nodes.filter((node) => !positions[node.id()]);\r\n    const nodesWithPosition = nodes.filter((node) => !!positions[node.id()]);\r\n\r\n    if (this.options?.hideNonPositional) {\r\n      // hide nodes without position\r\n      nodesWithoutPosition.addClass(HIDDEN_CLASS).style('display', 'none');\r\n    }\r\n\r\n    nodesWithPosition\r\n      ?.layout({\r\n        name: 'preset',\r\n        positions: positions,\r\n        fit: false,\r\n        animate: this.options?.animate,\r\n        animationDuration:\r\n          this.options?.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n        animationEasing: 'ease-out-cubic',\r\n      })\r\n      .run();\r\n\r\n    nodesWithoutPosition\r\n      ?.layout(this.getDefaultLayout())\r\n      .run();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.NodeCollection | undefined} nodes\r\n   */\r\n  private updateGeographicPositions(\r\n    nodes = this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection)\r\n  ) {\r\n    const updatePositions = (\r\n      nodes = this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection)\r\n    ) => {\r\n      const positions: cytoscape.NodePositionMap = Object.fromEntries(\r\n        nodes\r\n          .map((node) => {\r\n            return [node.id(), this.getGeographicPosition(node)];\r\n          })\r\n          .filter(([_id, position]) => {\r\n            return !!position;\r\n          })\r\n      );\r\n\r\n      // update only positions which have changed, for cytoscape-edgehandles compatibility\r\n      const currentPositions: cytoscape.NodePositionMap = Object.fromEntries(\r\n        nodes.map((node) => {\r\n          return [node.id(), { ...node.position() }];\r\n        })\r\n      );\r\n      const updatedPositions = getUpdatedPositionsMemo(\r\n        currentPositions,\r\n        positions\r\n      );\r\n\r\n      // hide nodes without position\r\n      const nodesWithoutPosition = nodes.filter(\r\n        (node) => !positions[node.id()]\r\n      );\r\n      const nodesWithPosition = nodes.filter(\r\n        (node) => !!positions[node.id()]\r\n      );\r\n\r\n      if (this.options?.hideNonPositional) {\r\n        nodesWithoutPosition.addClass(HIDDEN_CLASS).style('display', 'none');\r\n      }\r\n\r\n      nodesWithPosition\r\n        ?.layout({\r\n          name: 'preset',\r\n          positions: updatedPositions,\r\n          fit: false,\r\n        })\r\n        .run();\r\n    };\r\n\r\n    this.requestAnimationId = window.requestAnimationFrame(\r\n      function animatedUpdateGeographicPositions() {\r\n        updatePositions(nodes);\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private disableGeographicPositions() {\r\n    const nodes =\r\n      this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection);\r\n\r\n    // console.log(\"disableGeographicPositions\");\r\n    // this.cy\r\n    //   ?.layout({\r\n    //     name: 'preset',\r\n    //     positions: this.originalPositions,\r\n    //     fit: false,\r\n    //     animate: this.options?.animate,\r\n    //     animationDuration:\r\n    //       this.options?.animationDuration ?? DEFAULT_ANIMATION_DURATION,\r\n    //     animationEasing: 'ease-in-cubic',\r\n    //     stop: () => {\r\n    //       // show nodes without position\r\n    //       const nodesWithoutPosition = nodes.filter((node) =>\r\n    //         node.hasClass(HIDDEN_CLASS)\r\n    //       );\r\n    //       nodesWithoutPosition.removeClass(HIDDEN_CLASS).style('display', null);\r\n    //     },\r\n    //   })\r\n    //   .run();\r\n\r\n    this.deleteInternalLayoutPosition(nodes);\r\n    this.runDefaultLayout(nodes);\r\n    this.originalPositions = undefined;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {MouseEvent} event\r\n   */\r\n  private onGraphContainerMouseDown(event: MouseEvent) {\r\n    // @ts-ignore\r\n    const renderer = this.cy?.renderer();\r\n    if (\r\n      event.buttons === 1 &&\r\n      !isMultSelKeyDown(event) &&\r\n      !renderer.hoverData.down\r\n    ) {\r\n      // @ts-ignore,\r\n      if (this.cy) this.cy.renderer().hoverData.dragging = true; // cytoscape-lasso compatibility\r\n      this.dispatchMapEvent(event);\r\n\r\n      document.addEventListener(\r\n        'mouseup',\r\n        () => {\r\n          if (!this.panning) {\r\n            return;\r\n          }\r\n\r\n          this.panning = false;\r\n\r\n          // @ts-ignore, prevent unselecting in Cytoscape mouseup\r\n          if (this.cy) this.cy.renderer().hoverData.dragged = true;\r\n        },\r\n        { once: true }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {MouseEvent} event\r\n   */\r\n  private onGraphContainerMouseMove(event: MouseEvent) {\r\n    // @ts-ignore\r\n    const renderer = this.cy?.renderer();\r\n    if (\r\n      event.buttons === 1 &&\r\n      !isMultSelKeyDown(event) &&\r\n      !renderer.hoverData.down\r\n    ) {\r\n      this.panning = true;\r\n\r\n      this.dispatchMapEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {MouseEvent} event\r\n   */\r\n  private onGraphContainerWheel(event: MouseEvent) {\r\n    event.preventDefault();\r\n    this.dispatchMapEvent(event);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private onMapMove() {\r\n    if (this.layouting) {\r\n      // console.log(\"layouting\");\r\n      // When not-native-geographic nodes are in layouting we don't update their position. This should fix a glitch\r\n      // when you move the map when not-native-geographic nodes are in layouting\r\n      // TODO: fix this. It doesn't work because this.layouting become false too early\r\n      this.updateGeographicPositions(this.filterNodes('native-geographic'));\r\n    } else {\r\n      this.updateGeographicPositions();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.EventObject} event\r\n   */\r\n  private onLayoutStart(event: cytoscape.EventObject) {\r\n    const targets: cytoscape.NodeCollection = event[\"target\"][\"options\"][\"eles\"];\r\n\r\n    // we save when non-native-geographic nodes starts layouting\r\n    if (this.filterNodes('not-native-geographic', targets).length > 0) {\r\n      // console.log(\"onLayoutStart\");\r\n      this.layouting = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.EventObject} event\r\n   */\r\n  private onLayoutStop(event: cytoscape.EventObject) {\r\n    const targets: cytoscape.NodeCollection = event[\"target\"][\"options\"][\"eles\"];\r\n\r\n    // we save when non-native-geographic nodes stops layouting\r\n    if (this.filterNodes('not-native-geographic', targets).length > 0) {\r\n      // console.log(\"onLayoutStop\");\r\n      this.layouting = false;\r\n    }\r\n\r\n    this.saveInternalLayoutPositionAsLatLng(targets);\r\n  }\r\n\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private onDataChange() {\r\n    this.updateGeographicPositions();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.EventObject} event\r\n   */\r\n  private onGraphAdd(event: cytoscape.EventObject) {\r\n    if (!event.target.isNode()) {\r\n      return;\r\n    }\r\n\r\n    const node: cytoscape.NodeSingular = event.target;\r\n\r\n    if (!this.originalPositions) this.originalPositions = {};\r\n    this.originalPositions[node.id()] = { ...node.position() };\r\n\r\n    const nodes = this.cy?.collection().merge(node);\r\n    this.updateGeographicPositions(nodes);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  private onGraphResize() {\r\n    this.map?.invalidateSize(false);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.EventObject} event\r\n   */\r\n  private onGraphDragFree(event: cytoscape.EventObject) {\r\n    const node: cytoscape.NodeSingular = event.target;\r\n\r\n    // some methods requires a node collection, let make it\r\n    const nodes = this.cy?.collection().merge(node);\r\n\r\n    if (this.options?.setPosition) {\r\n      const { x, y } = node.position();\r\n      const position: PointTuple = [x, y];\r\n      const lngLat = this.map?.containerPointToLatLng(position);\r\n      if (lngLat) this.options.setPosition(node, lngLat);\r\n    } else {\r\n      this.saveInternalLayoutPositionAsLatLng(nodes);\r\n    }\r\n\r\n    this.updateGeographicPositions(nodes);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {MouseEvent} event\r\n   */\r\n  private dispatchMapEvent(event: MouseEvent) {\r\n    if (\r\n      event.target === this.mapContainer ||\r\n      // @ts-ignore\r\n      this.mapContainer?.contains(event.target)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // @ts-ignore\r\n    const clonedEvent = new event.constructor(event.type, event);\r\n    this.map?.getContainer().dispatchEvent(clonedEvent);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.NodeSingular} node\r\n   * @return {L.LatLng | undefined}\r\n   */\r\n  private getNodeLngLat(node: cytoscape.NodeSingular): L.LatLng | undefined {\r\n    if (typeof this.options?.getPosition !== 'function') return;\r\n\r\n    const lngLatLike = this.options?.getPosition(node);\r\n    if (!lngLatLike) {\r\n      return;\r\n    }\r\n\r\n    let lngLat;\r\n    try {\r\n      lngLat = L.latLng(lngLatLike);\r\n    } catch (e) {\r\n      return;\r\n    }\r\n\r\n    return lngLat;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.NodeCollection} nodes\r\n   * @return {L.LatLngBounds}\r\n   */\r\n  private getNodeLngLatBounds(\r\n    nodes: cytoscape.NodeCollection = this.cy?.nodes() ??\r\n    ([] as unknown as cytoscape.NodeCollection)\r\n  ): L.LatLngBounds {\r\n    return nodes.reduce((bounds, node) => {\r\n      const lngLat = this.getNodeLngLat(node);\r\n      if (!lngLat) {\r\n        return bounds;\r\n      }\r\n\r\n      return bounds.extend(lngLat);\r\n    }, L.latLngBounds([]));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {cytoscape.NodeSingular} node\r\n   * @param {boolean} onlyNativePosition no scratch position\r\n   * @return {cytoscape.Position | undefined}\r\n   */\r\n  private getGeographicPosition(\r\n    node: cytoscape.NodeSingular,\r\n    onlyNativePosition: boolean = false\r\n  ): cytoscape.Position | undefined {\r\n\r\n    const lngLat = onlyNativePosition\r\n      ? this.getNodeLngLat(node)\r\n      : this.getNodeLngLat(node) || (node.scratch('leaflet') && node.scratch('leaflet').currentGeoposition);\r\n\r\n    if (!lngLat) {\r\n      return;\r\n    }\r\n\r\n    return this.map?.latLngToContainerPoint(lngLat);\r\n  }\r\n\r\n  /**\r\n   * Filter a type of nodes out of nodes list.\r\n   *\r\n   * 4 types of nodes:\r\n   * <ul>\r\n   *   <li> <b>native-geographic</b>: nodes with a native geographic position (i.e. <i>this.getNodeLngLat()</i> returns non-null value) </li>\r\n   *   <li> <b>geographic</b>: nodes with a geographic position (either native position or internal - i.e. saved in <i>node.scratch()</i> - position) </li>\r\n   *   <li> <b>not-native-geographic</b>: nodes without a native geographic position (i.e. <i>this.getNodeLngLat()</i> returns null value) </li>\r\n   *   <li> <b>not-geographic</b>: nodes without a geographic position (neither native position nor internal position) </li>\r\n   * </ul>\r\n   * @private\r\n   * @param type\r\n   * @param nodes set of nodes to filter, if not specified all noeds on the graph will be filtered\r\n   */\r\n  private filterNodes(\r\n    type: 'geographic' | 'native-geographic' | 'not-geographic' | 'not-native-geographic',\r\n    nodes: cytoscape.NodeCollection = this.cy?.nodes() ?? ([] as unknown as cytoscape.NodeCollection)\r\n  ) {\r\n    const onlyNative = type == 'native-geographic' || type == 'not-native-geographic';\r\n\r\n    const positions: cytoscape.NodePositionMap = Object.fromEntries(\r\n      nodes\r\n        .map((node) => {\r\n          return [node.id(), this.getGeographicPosition(node, onlyNative)];\r\n        })\r\n        .filter(([_id, position]) => {\r\n          return !!position;\r\n        })\r\n    );\r\n\r\n    if (type == 'geographic' || type == \"native-geographic\") {\r\n      return nodes.filter((node) => !!positions[node.id()]);\r\n    } else { // not-geographic || not-native-geographic\r\n      return nodes.filter((node) => !positions[node.id()]);\r\n    }\r\n  }\r\n}\r\n","import L from 'leaflet';\r\nimport { MapHandler } from './mapHandler';\r\nimport { Instance, MapHandlerOptions } from './types';\r\n\r\nfunction register(cytoscape: Instance) {\r\n  if (!cytoscape) {\r\n    return;\r\n  }\r\n\r\n  cytoscape(\r\n    'core',\r\n    'L',\r\n    function (mapConfig: L.MapOptions, config: MapHandlerOptions) {\r\n      return new MapHandler(\r\n        // @ts-ignore\r\n        this,\r\n        mapConfig,\r\n        config\r\n      );\r\n    }\r\n  );\r\n}\r\n\r\nif (typeof window.cytoscape !== 'undefined') {\r\n  register(window.cytoscape);\r\n}\r\n\r\nexport default register;\r\n"],"names":["module","arr","Array","isArray","exports","i","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","len","arr2","o","minLen","arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","TypeError","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","obj","safeIsNaN","Number","isNaN","areInputsEqual","newInputs","lastInputs","first","second","isMultSelKeyDown","event","shiftKey","metaKey","ctrlKey","getUpdatedPositionsMemo","resultFn","isEqual","cache","memoized","newArgs","arguments","lastThis","this","lastArgs","lastResult","apply","clear","memoizeOne","currentPositions","positions","fromEntries","entries","filter","position1","position2","id","position","currentPosition","x","y","assign","bind","tgt","srcs","forEach","src","keys","k","DEFAULT_FIT_PADDING","HIDDEN_CLASS","DEFAULT_LAYOUT","MapHandler","cy","mapOptions","options","onGraphContainerMouseDown","onGraphContainerMouseMove","onGraphContainerWheel","onMapMove","onLayoutStart","onLayoutStop","onGraphAdd","onGraphResize","onGraphDragFree","onDataChange","getPosition","Error","setPosition","originalAutoungrabify","autoungrabify","originalUserZoomingEnabled","userZoomingEnabled","originalUserPanningEnabled","userPanningEnabled","graphContainer","container","addEventListener","onGraphContainerMouseDownBound","onGraphContainerMouseMoveBound","onGraphContainerWheelBound","on","onGraphAddBound","onGraphResizeBound","onGraphDragFreeBound","onDataChangeBound","onLayoutStartBound","onLayoutStopBound","mapContainer","document","createElement","style","top","left","width","height","prepend","map","L","Map","fit","undefined","padding","animate","onMapMoveBound","originalZoom","zoom","originalPan","pan","duration","animationDuration","easing","viewport","enableGeographicPositions","_this$cy","removeEventListener","off","remove","_this$options","disableGeographicPositions","nodes","_this$cy4","bounds","getNodeLngLatBounds","isValid","fitBounds","customOptions","_this$options2","layout","_this$cy5","deleteInternalLayoutPosition","getDefaultLayout","run","_this$cy6","node","scratch","currentGeoposition","_this","_this$map4","containerPointToLatLng","_this$cy7","_this$cy8","originalPositions","_this2","getGeographicPosition","nodesWithoutPosition","nodesWithPosition","_this$options3","hideNonPositional","addClass","_this$options4","_this$options5","animationEasing","_this$cy9","updatePositions","_this3","_this3$cy","updatedPositions","_this3$options","requestAnimationId","window","requestAnimationFrame","_this$cy10","runDefaultLayout","renderer","_this$cy11","buttons","hoverData","down","dragging","dispatchMapEvent","_this4","panning","dragged","once","_this$cy12","preventDefault","layouting","updateGeographicPositions","filterNodes","targets","saveInternalLayoutPositionAsLatLng","isNode","_this$cy13","collection","merge","invalidateSize","_this$cy14","_this$options6","lngLat","_this$map6","_this$mapContainer2","contains","clonedEvent","type","getContainer","dispatchEvent","_this$options7","lngLatLike","_this$options8","latLng","e","_this$cy15","reduce","_this5","getNodeLngLat","extend","latLngBounds","onlyNativePosition","_this$map8","latLngToContainerPoint","_this$cy16","onlyNative","_this6","register","cytoscape","mapConfig","config"],"mappings":"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"}